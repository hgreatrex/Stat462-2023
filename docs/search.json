[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT-462 Lab Book",
    "section": "",
    "text": "Welcome!\nThis is your home for all your instructions, labs, tutorials and projects.\nYou can find the class syllabus here: https://psu.instructure.com/courses/2243429/assignments/syllabus\nLook at the tabs to find:\n\nTutorials (constantly updated)\nYour Lab Overview & Labs\n\nProject Space\n\nThis book is made using R-Markdown and Quarto Websites. If you want to learn more, visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "in_S462_Lab1.html",
    "href": "in_S462_Lab1.html",
    "title": "Lab 1: R intro",
    "section": "",
    "text": "The aim of this lab is to get comfortable in R and in R-Markdown, and to practice identifying some study jargon as we practiced in class. Lab instructions will be here and how-tos will be condensed into the Tutorial\nThe Canvas page for this lab is: https://psu.instructure.com/courses/2243429/assignments/14748231\nIf the labs are causing major problems with your computer or your computer hardware is struggling (or you have any other software issue), Talk to Dr Greatrex. We can fix this and there are other options for “online R” that you can use.\n\n\n\n\nFirst, please review the lab Q&A: CLICK HERE. It explains\n\nWhat you need to submit\nHow you are graded and where the rubric is\nThe late policy\nWhat counts as cheating\n\n\n\n\nReview CLICK HERE to see some of the powerful things we can do in R.\nWe will do this in class.\nYour homework:\n\n\nCreate a new RMarkdown document called STAT462-Lab1-PSUID.Rmd. e.g. for me STAT462-Lab1-hlg5155.Rmd. \nDelete all the text/code below line 11 (e.g. everything from “R Markdown onward”)\n\n\n\n\nYou might find it easier to use the markdown visual text editor.  Click the “A” symbol at the top right to switch (instructions here:Tutorial 4.6)\n\nIn the white text area, create a level 1 heading called “Introduction to STAT-462”. For a cheat sheet to help with this, move your mouse to the top of the page, click the help menu, then click Markdown Quick reference, or see Tutorial 4.6.\nLeave a blank line, then use the STAT-462 syllabus to describe the course late policy in your own words (e.g. you’re writing about this in the white space).\nPress “knit” at the top of the screen. If you haven’t made a mistake a pop up should appear with a html file and your edits. If you have a made a mistake, stop and fix before continuing.\n\n\n\n\n\n\n\n\n\n\n<br<\nLeave another blank line and add a new Level 1 heading called “Code Showcase”. Add a blank line afterwards too. Create a code chunk (). Inside use R code to calculate the following \n\n1033 (e.g 103*103*103, or 103^3) \n\n_ The co-sine of your age (google is your friend, google R function for cosine) \n\nUse R code to work out how many characters are in the longest town name in Wales Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch. \n\nHint 1, remember you can copy paste this into your code. \nHint 2.. your tutorials and quote marks!\nHint 3.. you can google any R command, try gooling R command for number of characters in a word.\n\n\nPress “knit” at the top of the screen. If you haven’t made a mistake a pop up should appear with a html file and your edits. If you have a made a mistake, stop and fix before continuing.\n\n\n\n\nToday we will be using commands from the skimr package, the ggplot2 package and the plotly package.\nSomewhere near the top of your script, make a new code chunk and add this code. We will probably have to install them first (see the tutorial)\nRemember to run the code chunk! (pressing the green arrow, or go to the run button on the top right and press Run All)\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(ggpubr)\nlibrary(palmerpenguins)\n\n\n\n\n\n\n\nLeave a blank line, and create a new level 1 heading called Penguin Analysis. Leave a blank line afterwards too. We’re going to work with a table of data that’s already pre-loaded into R inside the ggplot2 package.\n\nMake sure you have run the library code chunk above without error, or it won’t work. \nLoad the data using this command\n\n\ndata(\"penguins\")\n\n\n\nType the ?penguins command in the console. This will bring up the help file.\nState the\n\n\nObject of Analysis\nA reasonable population you would be happy to apply this dataset to\nVariables and units\n\n\n\n\n\nNow look at the data itself. If you look in the environment tab, you will see a new variable called penguins Click on it’s NAME to see the spreadsheet/table itself and familiarise yourself with the data.  \nWe could have also looked at the raw data by either by typing its name into the console or a code chunk, or by using commands like head(penguins) to show the first few lines\nLet’s look at the summary statistics. Leave a blank line and create a new code chunk containing the following code \n\n# mpg comes from the ggplot2 package\n# skim comes from the skimr package\nskim(penguins)\n\nThis command compiles the summary statistics for mpg. You can also use the summary() command to achieve a similar result \n\nsummary(penguins)\n\nSummarise the dataset.\nThis should include,\n\nThe number of missing values (hint, you have it already..)\nHow many penguins were from 2008 (hint, table command..)\nA histogram of one variable of your choice (hint https://allisonhorst.github.io/palmerpenguins/articles/examples.html)\nA scatterplot between two variables of your choice (hint, https://allisonhorst.github.io/palmerpenguins/articles/examples.html)\nThe correlation between two variables of your choice\nA correlation test fully written up.\n\n\n\n\n\n\n\nRemember to save your work throughout and to spell check your writing (next to the save button). Now, press the knit button again. If you have not made any mistakes in the code then R should create a html file in your lab 1 folder which includes your answers. If you look at your lab 1 folder, you should see this there - complete with a very recent time-stamp.\nIn that folder, double click on the html file. This will open it in your browser. CHECK THAT THIS IS WHAT YOU WANT TO SUBMIT.\nIf you are on R studio cloud, see Tutorial 1 for how to download your files\nNow go to Canvas and submit BOTH your html and your .Rmd file in Lab 1."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html",
    "href": "in_S462_Tutorial1WhatisR.html",
    "title": "Tutorial 1: R Basics",
    "section": "",
    "text": "R is a free, open source statistical programming language. It contains millions of commands that are useful for data cleaning, analysis, and visualization.\nBy a “programming language”, I mean it is a collection of commands that you can type into the computer in order to analyse and visualise data.\nThe easiest way I find to think about R is that it is literally a language, like Spanish or Hindi, that is spoken by your computer. Learning R means learning vocabulary and grammar in order to communicate. It also means it will get easier with experience and practice..\n\n\n\n\nR-studio is a software environment, e.g a programmed designed to make it easy to write code in “R”.\nIt has many useful features. For example, you can easily see help files, run code, see your output and create outputs like this lab book! R-Studio also allows us to make interactive documents called R-Markdown files.\n\n\n\n\n\n\nR-studio is much more sophisticated\n\n\n\n\n\n\n\nWatch this 1 minute video on R-Studio: https://www.rstudio.com/products/rstudio/\nOr, if you prefer, this 5 minute video\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn R-project is a folder that will store everything to do with each lab in one place on your computer. On the website, each lab will be its own project.\nThis is incredibly useful - it means that if you switch from R-Cloud, to the lab computers, to your laptop, all you have to do is to move the folder and everything will just work. Equally, its easy to compare labs.\nLearn more here. You will have a project for each Lab and I may share projects with example code.\n\n\n\nRproject\n\n\n\n\n\n\nThere are two ways to do the labs, on your own computer or on the R studio Cloud website.\n\nDESKTOP: Means do this if you are using your own computer or laptop\nCLOUD: Means do this if you are using the website\n\n\n\nThe easiest way to get R-studio is to simply to use the R-Studio Cloud website\nHere you can log into an online version of R. and I believe is free for the first 25hrs each month. Like Jupyter Notebook, you can also programme in other langauges. If you need more time, you can make a new account, or pay for one month, or move to your desktop.\n\nAdvantages:\n\nSuper Easy. You will never have to worry about versions or updating.\nProjects are incredibly easy and I can debug things fast\nYou can do your labs anywhere you have access to a webpage \n\nDisadvantages:\n\nIt’s not as powerful, you won’t be able to play will millions of data points\nYou have to be online; bad internet connections make it harder\n\n\nTo sign up, make an account at https://rstudio.cloud/plans/free, then click the tabs here to look around. Sadly there is no student pricing right now.\n\n\n\nOnce you have logged in, you will get to a dashboard like this, called the R-studio workspace. You make a new project by clicking the button on the top right. You can open different projects in different tabs on your browser. You can also go back to the work-space at any time.\nYou can get here from any web-browser, You do not need a special computer.\n\n\n\n\n\nThe Cloud dashboard\n\n\n\n\n\n\n\nOn the cloud this is very easy, just go back to https://rstudio.cloud/content/yours\n \n\n\n\nIgnore this until later on and you need to submit your lab.\nYou will need to submit two files for each lab, an “.Rmd” and a “.html”. More later on those, but here is how to download them so you can submit them\n\nOn the R-Studio Cloud website; inside your project, go to the files tab (next to Projects/Help in one quadrant. You will see a list of files, one with the file type .Rmd (your code) and one with .html(the website you made when you pressed knit). Look at the red circle in the pic below\nClick the checkbox to the left the .RmD\nLook just above at the Files quadrant settings menu. Click the blue “more” cogwheel icon. (see diagram)\nNow click export. This will download the file and export it to Canvas s\nREPEAT FOR THE HTML (you can do them together but it exports as a zip)\n\n\n\n\n\n\nDownloading the files\n\n\n\n\n\n\n\nSimply click the upload button inside your project in the files tab and upload your files. You do not need subfolders.\n\n\n\n\n\nLook near the red circles\n\n\n\n\n\n\n\n\n\n\nIf you have your own computer, you can run R-Studio for free on there.\n\nAdvantages:\n\nIts powerful and we will learn how to use and update it\nNo need for the internet\nYou can play with millions of data points \n\nDisadvantages:\n\nIt can be annoying to install and update, especially on old computers.\nYou are tied to your laptop/computer (although you can uplaod your files to the cloud)\n\n\n\n\nIf you already have R and/or R-Studio, it is very important you update BOTH of them to the most recent version. To do so, pretend you are installing them from scratch. If you are worried this will affect another class, chat with Dr Greatrex before starting out.\nWhy?\nJust as English has evolved over the years, the R language is always evolving. We keep track using Versions.\nTo make sure we are all on the same page, you need the most up-to-date version of the R commands.\nThe version of R I am using is :\n\n\n[1] \"R version 4.2.2 (2022-10-31) Innocent and Trusting\"\n\n\nAs long as yours is that or above that you should be fine. The current most recent version of the language on the website is:\n\n\n[1] \"The latest release (2022-10-31, Innocent and Trusting)\"\n\n\n\n\n\n\n\n\nTo make R-Studio run on your computer, you need to download TWO things: [1] A programme that teaches your computer the ability to “speak” in R and [2] The R studio software itself\n\n\n[STEP 1 of 2] Download & install the R-language itself:\n\nGo to: https://cloud.r-project.org/bin/windows/base/ ,\nDownload this version of R (the main download R for windows button)\n\n\n\n[1] \"The latest release (2022-10-31, Innocent and Trusting)\"\n\n\n\nRun and click next through all the options\n\n[STEP 2 of 2] Download & install R studio:\n\nGo to: https://www.rstudio.com/products/rstudio/download/#download> ,\ndownload R studio for windows\nRun and click next through all the options\n\n\n\n\n\n\n\nTo make R-Studio run on your computer, you need to download TWO things: [1] A programme that teaches your computer the ability to “speak” in R and [2] The R studio software itself\n\n\n[STEP 1 of 2] Download & install the R-language itself for mac:\n\nGo to:https://cloud.r-project.org/bin/macosx/ ,\ndownload this version of R (the .pkg file on the left menu)\n\n\n\n[1] \"The latest release (2022-10-31, Innocent and Trusting)\"\n\n\n\nRun and click next through all the options\n\n[STEP 2 of 2] Download & install R studio for mac:\n\nGo to: https://www.rstudio.com/products/rstudio/download/#download> ,\ndownload R studio for Mac\nRun and click next through all the options\n\n\n\n\n\n\n\n\nIMPORTANT! If you haven’t already, on an easy to access place on your computer, make a folder called GEOG-364. This is where ALL your labs are going to live.\nNow everything is installed, open R-studio (NOT R!).\n\n\n\n\n\n\n\n\n\n\n\n\nGo to the file menu at the very top and click New Project\nSelect New Directory, then New Project\nName your project GEOG364-Lab1-PROJECT (or whatever lab)\nUnder “create project as a subdirectory of”, hit the browse button and go inside your GEOG-364 main folder (you just need to be in the folder, you don’t need to have selected anything). Press open\nFinally, press Create Project\n\n\n\n\n\n\n\n\n\nR will change slightly. If you look at the top of the screen in the title bar, it should say something like GEOG364-Lab1-Project R Studio.\nThe Files tab should have gone to your project folder. Essentially, R-Studio is now “looking” inside your Lab 1 folder, making it easier to find your data and output your results.\n\n\n\n\n\nHow to check you are in a project\n\n\n\n\n\nEssentially, R-Studio is now “looking” inside your Lab 1 folder, making it easier to find your data and output your results.\nIf you want one, final check, try typing this into the console (INCLUDING THE EMPTY PARANTHESES/BRACKETS), press enter and see if it prints out the location of Lab 1 on your computer. If not, talk to an instructor.\n\ngetwd()\n\n\n\n\n\nOK, let’s imagine that you get halfway through your lab and your computer dies. How do you get back to your Lab work? Try this now. Close down R-Studio.\nTo reopen a lab:\n\nDO NOT RE-OPEN R-STUDIO!\nInstead navigate on your computer to your GEOG-364/GEOG364-Lab1-Project folder.\nDouble click on the GEOG364-Lab1-Project.RProj file.\n\nThis will reopen R for that specific lab, so you can continue where you left off.\nIt means you can also open several versions of R studio for multiple projects, which can be very useful in keeping labs separate and staying sane."
  },
  {
    "objectID": "in_S462_Tutorial0Index.html",
    "href": "in_S462_Tutorial0Index.html",
    "title": "Tutorial index",
    "section": "",
    "text": "Your tutorials\nWelcome to your tutorials. I have written all of these and will try and keep them up-to-date and not too overwhelming.\nKnow there is a search bar!\nIf you don’t find what you need here, see if you can find it on google or one of these useful sites:\n\nWonderful graphics with example code: https://r-graph-gallery.com/\nTidyverse tutorials & cheat sheets: https://www.tidyverse.org/learn/\nQuatro tutorials & cheat sheets: https://quarto.org/"
  },
  {
    "objectID": "in_S462_Lab0Index.html",
    "href": "in_S462_Lab0Index.html",
    "title": "Lab Q&A",
    "section": "",
    "text": "You will be creating two files; an Rmd file containing your code and a .html file for viewing your finished document.\nYou need to submit both of these files on the relevant Canvas assignment page. Remember you can also add comments to your submission as/if needed.\n\n\n\n\nThere are 70 points available. Remember you can drop your lowest lab (e.g. you can skip one)\nYou can see the SPECIFIC RUBRIC we use for this lab on the canvas page. It’s literally how we will award the marks.\nWe will also provide as much feedback as possible, so please remember to click the rubric button to take a look.\n\n\n\n\nOverall, here is what your lab should correspond to:\n\n\n\n\n \n  \n    POINTS \n    Approx grade \n    What it means \n  \n \n\n  \n    68-70 \n    A* \n    Exceptional.  Above and beyond.   THIS IS HARD TO GET. \n  \n  \n    65-68 \n    A \n    Everything asked for with high quality.   Class example \n  \n  \n    60-65 \n    B+/A- \n    Solid work but the odd  mistake or missing answer in either the code or interpretation \n  \n  \n    55-60 \n    B-/B \n    Starting to miss entire/questions sections, or multiple larger mistakes. Still a solid attempt.  \n  \n  \n    49-55 \n    C/C+ \n    It’s clear you tried and learned something.  Just attending labs will get you this much as we can help you get to this stage \n  \n  \n    40-49 \n    D \n    You submit a single word AND have reached out to Dr G or Aish for help before the deadline (make sure to comment you did this so we can check) \n  \n  \n    30-40 \n    F \n    You submit a single word…....  ANYTHING..                Think, that's 30-40 marks towards your total…. \n  \n  \n    0+ \n    F \n    Didn’t submit, or incredibly limited attempt.  \n  \n\n\n\n\n\n\n\n\n\nIf you have technical problems & have sent me canvas message with our code and a screenshot of the issue BEFORE THE DEADLINE, all late penalties go away until we have fixed it.\nSubmitting late is a risk. The lab might be graded at any time past the deadline with no notice given. If worked answers are released then that is too late.\nBut.. I would prefer you submit late than not at all. If you’re going to be late for any reason (you don’t need to explain why), send Dr G a canvas message.\nI will only start penalizing if you’re consistently late and I have sent a written warning. See the course syllabus for more info. https://psu.instructure.com/courses/2243429/assignments/syllabus\n\n\n\n\nYou can talk with each other to help during these labs e.g. you can see each others screens and work out answers together. I will try as much as possible to provide alternate datasets.\nBUT NEVER SHARE CODE/SEND SCRIPTS.\nALL TEXT SHOULD BE IN YOUR OWN WORDS.\nFor example:\n\nWorking out together the right way to apply the seq() function, then each independently adding it to your own scripts is OK.\nCopy/pasting your friend’s code/text is not..\nSo DISCUSS with friends, but then turn away to your own screen and write your own code and text.\n\nI will be randomly running lab reports through plagiarism software."
  },
  {
    "objectID": "in_S462_Project0Index.html",
    "href": "in_S462_Project0Index.html",
    "title": "Project Overview",
    "section": "",
    "text": "Welcome to your projects\nPage will be added soon."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#the-screen",
    "href": "in_S462_Tutorial1WhatisR.html#the-screen",
    "title": "Tutorial 1: R Basics",
    "section": "The screen",
    "text": "The screen\nYou will be greeted by three panels:\n\nThe interactive R console (entire left)\nEnvironment/History (tabbed in upper right)\nFiles/Plots/Packages/Help/Viewer (tabbed in lower right)\n\n\n\n\n\n\n\n\n\n\n\n\nIf you wish to learn more about what these windows do, have a look at this resource, from the Pirates Guide to R: https://bookdown.org/ndphillips/YaRrr/the-four-rstudio-windows.html.\n\nIf you have used R before, you might see that there are variables and plots etc already loaded. It is always good to clear these before you start a new analysis. To do this, click the little broom symbol in your environment tab"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#moving-the-4-quadrants-around",
    "href": "in_S462_Tutorial1WhatisR.html#moving-the-4-quadrants-around",
    "title": "Tutorial 1: R Basics",
    "section": "Moving the 4 quadrants around",
    "text": "Moving the 4 quadrants around\nYou might find you like the different quadrants in a different order. To change this, look at the menu at VERY TOP OF THE SCREEN.\n\nIn theView menu, there is a /Panes/Pane Layout menu item, where you can move the on-screen quadrants around. I tend to like the console to be top left and scripts to be top right, with the plots and environment on the bottom - but this is personal choice.\n\n\n\n\n\n\nMy preferred set up\n\n\n\n\n\nThere should also be a menu called HelpUseful for R-studio version and Markdown cheatsheets."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#changing-settings",
    "href": "in_S462_Tutorial1WhatisR.html#changing-settings",
    "title": "Tutorial 1: R Basics",
    "section": "Changing settings",
    "text": "Changing settings\nR-studio wants to be helpful and will try to re-load exactly where you were in a project when you log back in. This can get confusing, so we are going to turn this off.\nThere are two places you might find the options. Depending on how you are using R-studio, you will EITHER find it by:\n\nClick on the R-studio menu button on the top left of the screen, then click Preferences.\n\nOR\n\nClick on the tools menu button on the top right of the screen,-> Global Options\n\nNow:\n\nUNCLICK “Restore most recently opened project at startup”\nUNCLICK “Restore .RData into workspace on startup”\nSet “Save workspace to .RData on” exit to Never\nUNCLICK “Restore previously open source documents on startup”\nYou can also click the appearances tab to change how the screen looks."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#what-are-packages",
    "href": "in_S462_Tutorial1WhatisR.html#what-are-packages",
    "title": "Tutorial 1: R Basics",
    "section": "What are packages?",
    "text": "What are packages?\nAs described earlier, we program in R by typing a series of commands. R is open source meaning anyone can create a new one, so over the last 20 years,tens of millions of new custom commands have been created.\nCommands tend to be grouped together into collections called Packages or Libraries (two names for the same thing). For example, one package contains the complete works of Shakespeare; another allows interactive website design; another allows advanced Bayesian statistics. There is a package for literally everything and there are now about 20,000 packages available. You can see the full list here: https://cran.r-project.org/web/packages/available_packages_by_name.html\nThis is far too many to store on your computer, so most live on the internet in an online (free) “Package Store”. You can download the ones you want, ready to load later.\nSo to access the commands in a package we need these two steps:\n\nONCE ONLY: Download the package from the internet\nEVERY TIME: Load the packages you want\n\n\nA close analogy is your phone: There are millions of apps available from banking, to 50 different calendar apps. You don’t have every app in the world installed on your phone - and you don’t have every app you do download running at the same time.  Instead you download the apps that you think you will need (occasionally downloading a new one on the fly) - and when you need to use an app, you click on it to open."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#downloading-a-new-package",
    "href": "in_S462_Tutorial1WhatisR.html#downloading-a-new-package",
    "title": "Tutorial 1: R Basics",
    "section": "Downloading a new package",
    "text": "Downloading a new package\nThis is like going to the app store to get a new app. Just like you only go to the app store once, this is a one-off for each package.\n\nLook for the quadrant with the packages tab in it.\n\nYou will see a list of packages/apps that have already been installed.\nClick the INSTALL button in the Packages tab menu (on the left)\nStart typing the package name and it will show up (check the include dependencies box). Install the package.\n\n\nOR\n\nR will sometime tell you that you are missing a package (sometimes a little yellow ribbon), click yes to install!\n\nNote, if you run this command multiple times, or the packages is already loaded, R-Studio might want to restart and sometimes gets confused. If it keeps asking, close R-studio, reopen and try again. If it really doesn’t want to work, open R itself and run in the console there.\nTry installing the bardr package onto your computer"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#using-the-commands-inside-a-package",
    "href": "in_S462_Tutorial1WhatisR.html#using-the-commands-inside-a-package",
    "title": "Tutorial 1: R Basics",
    "section": "Using the commands inside a package",
    "text": "Using the commands inside a package\nJust like you can’t use a phone app until you press the icon, just getting a package from the app-store doesn’t make the commands immediately available.\nFor that you need to load it (like clicking on an app). This can be done with the library() command.\nIn the console type this to install the full works of Shakespeare in the bardr package (https://www.rdocumentation.org/packages/bardr/versions/0.0.9)\n\nlibrary(bardr)\n\nI suggest keeping all your library() commands in a code chunk near the top of the file and\nIf you have managed to load a package successfully, often nothing happens - this is great! It means it loaded the package without errors. Otherwise, I suggest running this command TWICE! This is because loading packages will print “friendly messages” or “welcome text” the first time you load them.\nFor example, this is what shows up when you install the tidyverse package. The welcome text is indicating the sub-packages that tidyverse downloaded and also that some commands now have a different meaning.\n\n\n\n\n\nTidyverse install messages\n\n\n\n\nTo find out if what you are seeing is a friendly message or an error, run the command again. If you run it a second time and there is no error then nothing should happen."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#use-a-single-command-from-a-package",
    "href": "in_S462_Tutorial1WhatisR.html#use-a-single-command-from-a-package",
    "title": "Tutorial 1: R Basics",
    "section": "Use a single command from a package",
    "text": "Use a single command from a package\nSometimes multiple packages name a command the same thing and you want to specify which package you want to use. You can do this using the :: symbol\nFor example, this command forces the computer to use the ‘dplyr package’ version of filter.\n\ndplyr::filter(mydata)"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#the-console",
    "href": "in_S462_Tutorial1WhatisR.html#the-console",
    "title": "Tutorial 1: R Basics",
    "section": "The Console",
    "text": "The Console\nThe console window (see Figure @ref(fig:Tut_Fig1)) is essentially a phone call with your computer, where you “speak” in R.\n\nThe computer has a little > symbol to say it is listening/waiting for your command\nYou type in a command\nThe computer tries to carry it out and will print the answer directly onto the screen\n\nLet’s start by the simplest command possible. Type this command into your R console and press enter to run.\n\n1+1\n\nWhen you press enter, it should give you the answer…. 2\n\n1+1\n\n[1] 2\n\n\n\nType this command into your R console and press enter to run.\n\n# Take the sine function of the number 2, like sin(2) on your calculator\nsin(2)\n\nHere we have a command sin() applied to the number 2. We also have a comment in green, which the computer ignores."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#spacing-and-capital-letters",
    "href": "in_S462_Tutorial1WhatisR.html#spacing-and-capital-letters",
    "title": "Tutorial 1: R Basics",
    "section": "Spacing and Capital Letters",
    "text": "Spacing and Capital Letters\n\nSpacing mostly does not matter: 1+1 will generate the same answer as 1      +       1.\n\nException: you cannot have a space between a command name and its ( ) e.g sin (2) will fail`\n\nCapital letters DO matter. R is case sensitive.\nTo see previous commands, you can click the history tab (Environment quadrant) or press the up/down arrows on your keyboard, but when you close R, all record of these commands will be lost.\n\n\n ## R as a calculator {#Tut3B_Calc}\nWhen using R as a calculator, the order of operations is the same as you would have learned back in school, so use brackets to force a different order. For example, in either the console or a script, try running these two commands\n\n3 + 5 * 2\n\nand\n\n(3 + 5) * 2\n\n\nWe can also take shortcuts with our numbers. For example 1:5 means take all the numbers 1 2 3 4 5 (e.g. increment the integers one - to - five). Try typing this command and make sure you understand the result.\n\n(1 + 2) * 5:3\n\n[1] 15 12  9\n\n\n\nWe can use this trick to make our first plot! Try entering this command and see what happens. It should plot these numbers against each other\n\n\n  x  y\n1 1  6\n2 2  7\n3 3  8\n4 4  9\n5 5 10\n\n\n\nplot(x= 1:5, y= 6:10,xlab=\"x-axis\",ylab=\"y-axis\")"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#asking-questionscomparisons",
    "href": "in_S462_Tutorial1WhatisR.html#asking-questionscomparisons",
    "title": "Tutorial 1: R Basics",
    "section": "Asking questions/comparisons",
    "text": "Asking questions/comparisons\nWe can also do comparisons in R - using the special symbols TRUE or FALSE (no quote marks, they are special).\nHere we are asking R whether 1 is equal to 1.\n\n# note two equals signs is read as \"is equal to\"\n1 == 1  \n\n[1] TRUE\n\n\nWe could also have used\n\n!= “Not equal to”\n< “Less than”\n<= “Less than or equal to`\n> “Greater than”\n>= “Greater than or equal to”\n\nNow ask the computer if the number 12 is less than or equal to the number 10."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#Tut3C_plus",
    "href": "in_S462_Tutorial1WhatisR.html#Tut3C_plus",
    "title": "Tutorial 1: R Basics",
    "section": "The + symbol in the console",
    "text": "The + symbol in the console\nIf you type in an incomplete command, R will understand and wait for you to complete it. For example, if you type 1 + and press enter, R will know that you are not finished typing. So it will move onto the next line but the > will have changed into a +, which means its waiting for you to complete your command.\nIf you want to cancel a command you can simply hit the “Esc” key or press the little stop symbol and R studio will reset.\nPressing escape isn’t only useful for killing incomplete commands: you can also use it to tell R to stop running code (for example if it’s taking much longer than you expect), or to get rid of the code you’re currently writing."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#Tut3D_functions",
    "href": "in_S462_Tutorial1WhatisR.html#Tut3D_functions",
    "title": "Tutorial 1: R Basics",
    "section": "Functions/Commands",
    "text": "Functions/Commands\nWatch this short video to learn three important facts about functions:\n\n\n\n\n\n\n\n\n\nThe power of R lies in its many thousands of these built in commands, or functions. In fact, we have already come across one - the plot command. A function, or command is simply an action you can take - like pressing the square root button on a calculator.\nA command is always followed by parentheses ( ), inside which you put your “arguments” (e.g. the thing you want to take the square root of)\nTry typing these EXACTLY into the console.\n\nnchar(\"hello\")\n\nThis will count the number of letters in the word “hello” (e.g.\n\n\n\n\nfile.choose()\n\nThis will open up an interactive window (sometimes behind the studio screen), choose any file and it will print the location in the console. NOTE WE STILL NEED THE PARENTHESES, but there are no arguments so they are empty.\n\n\nTo understand what I mean about parentheses, try typing each of these commands exactly and see what happens.\n\n# Typing this into the console will print out the underlying code\nfile.choose \n\n# Typing it WITH parentheses will run the command. Note for this command, the parentheses are empty!  \nfile.choose()\n\n# Typing a ? in front will open the help file for that command in the help quadrant\n?file.choose\n\nSometimes we need to give the command some additional information as an argument. Anything we wish to tell the command should be included inside the inside the parentheses (separated by commas). The command literally only knows about the stuff inside the parentheses.\n\nsin(1) # trigonometry functions.  Apply the sine function to the number 1. \n\nlog(10) # natural logarithm.  Take the natural logarithm of the number 10. \n\nnchar(\"hello\") # Count the letters in the word hello\n\nWe can also add optional extra arguments. For example let’s improve our plot. This following command will plot the number 1 to 10 against the numbers 12 to 20, along with some axis labels. When you run this, the plot will show up in the plots tab.\n\n# plot the numbers 1 to 10 against the numbers 11 to 20\nplot(1:10,11:20,col=\"dark blue\", xlab=\"x values\",ylab=\"GEOG-364 is the best\") \n\n\n\n\nIf you are feeling lost, https://swcarpentry.github.io/r-novice-gapminder/01-rstudio-intro/ is a good website which goes over a lot of this in more detail."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#Tut3E_text",
    "href": "in_S462_Tutorial1WhatisR.html#Tut3E_text",
    "title": "Tutorial 1: R Basics",
    "section": "Dealing with text",
    "text": "Dealing with text\nIn R, the computer interprets most words as commands. But sometimes we need to actually input text, for example for a plot title. For the computer to understand text, you need quote marks. The computer will see anything without quote marks as a command.\nFor example, try typing print(\"Hello World\") into the console and the computer should just repeat it back to you.Forget about the quotes and this happens..\n\n\n\n\n\nYour screen after running the project\n\n\n\n\nYour first error. The “unexpected symbol” it’s talking about is the computer thinking that “Hello” and “world” must be two different commands, then getting confused by the space between Hello and World.."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#Tut3F_vars",
    "href": "in_S462_Tutorial1WhatisR.html#Tut3F_vars",
    "title": "Tutorial 1: R Basics",
    "section": "Variables",
    "text": "Variables\nSo now we can use R as a calculator and even add a few more complex commands. What we need to be able to do now is to save the results, or load in data so we can run more complex commands. We do this through assigning our results to a variable. By this I mean we save the results and give them a name, then in the future, instead of retyping the whole command, we simply type that name and R will recall the answer.\nThe symbol to store data into a variable is using the assignment arrow <-, which is made up of the left arrow and a dash. You can also use the equals sign, but it can cause complications later on. Try typing this command into the console:\n\nx <- 1/50\n\nNotice that pressing enter did not print a value onto your screen as it did earlier. Instead, look down at the environment tab, you should notice that an x has turned up, with the result next to it.\nSo our variable x is now associated with the value 0.02, or 1/50. You can print a variable on screen by typing its name, no quotes, or by using the print command. Try printing out your variable.\n\nx\n\n# or\n\nprint(x)\n\n# see what happens when you do this\n\nprint(\"x\")\n\nThis ‘x’ variable can be used in place of a number in any calculation that expects a number. Try typing\n\nlog(x)\n\n# this is now the same as \nlog(1/50)\n\nThe way R works is that first it looks for the commands on the right of the arrow. It runs all of them, calculates the result, then saves that result with the name on the left of the arrow. It does not save the command itself, just the answer. For example, in this case, R has no idea that x was created using maths, it just knows that it is equal to the number 0.02.\nNotice also that variables can be reassigned. Type this into your console.\n\nx <- 100\nprint(x)\n\nx used to contain the value 0.025 and and now it has the value 100.\nNote, the letter x isn’t special in any way, it’s just a variable name. You can replace it with any word you like as long as it contains no spaces and doesn’t begin with a number.\nfor example\n\nvlogbrothers.DFTBA <- \"Dont forget to be awesome\"\nprint(vlogbrothers.DFTBA)\n\nHow you name stuff is up to you, , but be consistent. Different people use different conventions for long variable names, these include\n\nperiods.between.words.1 (as you can see, I like this)\nunderscores_between_words\ncamelCaseToSeparateWords\n\nFinally, R IS CASE SENSITIVE. X and x are different variables! Try these and you will see both appear separately in your environment tab.\n\nh <- 1\nH <- 2\n\nans <- h+H\nprint(ans)\n\n\nprint(h)\n\n\nprint(H)\n\nTo delete a variable, you can use the rm() command e.g.\n\nrm(x)\n\nand to clear everything, type\n\nrm(list=ls())\n\n\nCombining variables\nAs I showed above, you can now use multiple variables together in more complex commands. For example, try these commands:\n\nx <- 2\n\n#Take the variable x, add 1 then save it to a new variable called y\ny <- x + 1 \n\n# print the multiple of 2yx onto the screen\nprint(2*y*x)\n\nNow you can see that there are two variables in your environment tab, x and y. Where y is the sum of the contents of x plus 1.\nYou can even use this to change your original variable . Try typing the code below in a few times into the console and see what happens.\nA short cut to do this is to type the commands the first time, then use the up-arrow on your keyboard to cycle back through previous commands you have typed\n\nx <- x + 1 # notice how RStudio updates its description of x in the environment tab\nx          # print the contents of \"x\" onto the screen\n\nOur variables don’t have to be numbers. They could refer to tables of data, or a spatial map, or any other complex thing. We will cover this more in future labs.\n \n ## Variables and Commands (functions)"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#how-to-use-the-r-help-files",
    "href": "in_S462_Tutorial1WhatisR.html#how-to-use-the-r-help-files",
    "title": "Tutorial 1: R Basics",
    "section": "How to use the R help files",
    "text": "How to use the R help files\nHere’s how I approach it\n\nThe only info we NEED to know about a new command is its name and the library/package/app it is stored in. \n\n\n\nIf you don’t know, you can often google the command, and go to one of the websites with an online helpfile\nDifferent websites have different ways of writing the things. For example, here are four common files you might see when looking at the mutate command which is a part of the dplyr package.\n\n\n\n\n\n\nCOMMAND=mutate, PACKAGE=dplyr\n\n\n\n\n\n\n\n\n\nCOMMAND=mutate, PACKAGE=dplyr\n\n\n\n\n\n\n\n\n\nCOMMAND=mutate, PACKAGE=dplyr\n\n\n\n\n\nHINT FOR LAB 2, THE COMMAND ITSELF IS CALLED qtm…\n\n\n\nIf you need to install the package, go to the Packages menu in the quadrant and click install.\n\n\n\nAdd the library(PACKAGENAME) command to your library code chunk and run to load the package.\n\n\n\nImmediately go to the help file for the command you want to run. You can do this in the help menu next to the packages menu, or using a ? in the CONSOLE e.g. ?skim. This will not work if you have not loaded the library.\n\n\n\nInside every help file you will see this structure (SKIM THIS EXTERNAL: TUTORIAL)[https://bcgov.github.io/ds-cop-intro-to-r/seeking-help-in-r.html].\n\n\n\nFINALLY, Scroll to the bottom of the helpfile for some worked examples that you can literally copy and paste into your console or your code to understand how it works.\n\n\nHINT FOR LAB 2, SCROLL ALL THE WAY TO THE VERY BOTTOM OF THE HELP FILE"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#example-understanding-skim",
    "href": "in_S462_Tutorial1WhatisR.html#example-understanding-skim",
    "title": "Tutorial 1: R Basics",
    "section": "EXAMPLE! Understanding skim",
    "text": "EXAMPLE! Understanding skim\nI was told last year about a new summary command, skim. Here’s how it ended up in your lab instructions\n\nI googled ‘skim r command’. This took me quickly to the R documentation page\n\n\n\n\n\n\nLook for Rdocumentation, search-R-Project, or Rdrr\n\n\n\n\n\nI ended up at this website: https://search.r-project.org/CRAN/refmans/skimr/html/skim.html. From this I saw that the skim() command is in the skimr package*\n\n\n\n\n\n\nThe skim command is in the skimr package (red circle)\n\n\n\n\n\nI added the skimr package to my library code chunk and re-ran\n\n\n# LIBRARIES\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggpubr)\nlibrary(ggplot2)\nlibrary(plotly)\n\nlibrary(skimr) \n\n\nIn the console, I FIRST typed > ?skimr to read about the package itself (e.g. ?PACKAGENAME). This doesn’t work if you didn’t run the library code chunk first.\n\n\n\nIn the console, I THEN typed > ?skim to bring up the help file and scrolled to the bottom. This doesn’t work if you didn’t run the library code chunk first. Inside every R help file you will see this structure: https://bcgov.github.io/ds-cop-intro-to-r/seeking-help-in-r.html but for now, I scrolled to the bottom.\n\n\n<br>\n\nI then ran the help file worked examples in the console to understand the command. It looks like skim is a nice summary command I can apply to a table (in their case the iris table). And that’s how it ended up here..\n\n\n skim(iris)\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSpecies\n0\n1\nFALSE\n3\nset: 50, ver: 50, vir: 50\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSepal.Length\n0\n1\n5.84\n0.83\n4.3\n5.1\n5.80\n6.4\n7.9\n▆▇▇▅▂\n\n\nSepal.Width\n0\n1\n3.06\n0.44\n2.0\n2.8\n3.00\n3.3\n4.4\n▁▆▇▂▁\n\n\nPetal.Length\n0\n1\n3.76\n1.77\n1.0\n1.6\n4.35\n5.1\n6.9\n▇▁▆▇▂\n\n\nPetal.Width\n0\n1\n1.20\n0.76\n0.1\n0.3\n1.30\n1.8\n2.5\n▇▁▇▅▃\n\n\n\n\n # Use tidyselect\n skim(iris, Species)\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSpecies\n0\n1\nFALSE\n3\nset: 50, ver: 50, vir: 50\n\n\n\n\n skim(iris, starts_with(\"Sepal\"))\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSepal.Length\n0\n1\n5.84\n0.83\n4.3\n5.1\n5.8\n6.4\n7.9\n▆▇▇▅▂\n\n\nSepal.Width\n0\n1\n3.06\n0.44\n2.0\n2.8\n3.0\n3.3\n4.4\n▁▆▇▂▁\n\n\n\n\n skim(iris, where(is.numeric))\n\n\nData summary\n\n\nName\niris\n\n\nNumber of rows\n150\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSepal.Length\n0\n1\n5.84\n0.83\n4.3\n5.1\n5.80\n6.4\n7.9\n▆▇▇▅▂\n\n\nSepal.Width\n0\n1\n3.06\n0.44\n2.0\n2.8\n3.00\n3.3\n4.4\n▁▆▇▂▁\n\n\nPetal.Length\n0\n1\n3.76\n1.77\n1.0\n1.6\n4.35\n5.1\n6.9\n▇▁▆▇▂\n\n\nPetal.Width\n0\n1\n1.20\n0.76\n0.1\n0.3\n1.30\n1.8\n2.5\n▇▁▇▅▃\n\n\n\n\n\n\n\nFinally, I googled tutorials to see if there was a friendlier way of looking: https://docs.ropensci.org/skimr/reference/skim.html"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#types-of-script",
    "href": "in_S462_Tutorial1WhatisR.html#types-of-script",
    "title": "Tutorial 1: R Basics",
    "section": "Types of script",
    "text": "Types of script\n\nA Basic R script (.r) [IGNORE]\n\nWE WILL NORMALLY IGNORE THIS OPTION, but it’s useful for a lot of programming and zero writing\n\n\nThis is simply just a blank notepad where you can save code commands. (How I learned to code)\nYou do NOT save any output\n\n\n\n\nR-Markdown\nTyping console is a phone call to the computer, you’re talking but you’re not keeping records of what you say (you can always press the up key to see previous commands but that’s about it). When you close R, everything you have done will be lost. As you might have seen, a basic R script is only one step better!\nIn this course we are going to focus on the R-Markdown format and you are going to submit your labs as websites/html files along with your code.\nMarkdown is cool.\nImagine a normal Microsoft Word document, but halfway through you can press a button and a mini R console appears. You type your code inside the mini console, it runs and puts the plots/output just below - then you leave the console and continue writing about the results. Essentially you never have to take another screenshot of results and move it to your output… Rmd files are also flexible. You can turn them into reports, websites, blogs, presentations or applications with a few short commands.\nRead more here: https://rmarkdown.rstudio.com or watch this short video"
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#creating-a-markdown-document",
    "href": "in_S462_Tutorial1WhatisR.html#creating-a-markdown-document",
    "title": "Tutorial 1: R Basics",
    "section": "Creating a markdown document",
    "text": "Creating a markdown document\nSave your R-script to your Lab 1 folder and close it.\nTime to make your own. Go to the File menu on the top left, then click New File - R-Markdown. If this is your first time ever, it might ask to download some packages to be able to do this. Say yes.\nEventually a window will open up:\n\n\n\n\n\n\n\n\n\nIt will ask you to name and save your file. Give it a relevant name. A new file should appear on your screen. At the top of that window (by the knit button, there is a “knit button”. Click that and it should make a website and autosave it for you. Make sure your email ID is somewhere in there.\n\n\n\n\n\nYours will say GEOG-364 not GEOG-364..\n\n\n\n\nThe new file on your screen is your first markdown script. Essentially, we have some space for text, some space for code, and a space at the top of the file where we can add information about themes/styles etc."
  },
  {
    "objectID": "in_S462_Tutorial1WhatisR.html#Tut4Da_knit",
    "href": "in_S462_Tutorial1WhatisR.html#Tut4Da_knit",
    "title": "Tutorial 1: R Basics",
    "section": "Knitting",
    "text": "Knitting\nThe file on your screen isn’t the finished article. To see how it will look as a final version, we need to “knit” it. Go to the top of the .Rmd file, find the knit button. Press it (you might have to first save your script if you haven’t already, then press it again)\nYou should see that the Markdown tab “builds” your document and you get an output as a website. The html should also be saved into your project folder. For example, from my other class, here is a file with markdown and knitted output."
  }
]