---
title: "T5: Loading Data"
editor: visual
---

```{r, include=FALSE}

# PACKAGES-----------------------------------------------
# Tutorial packages
library(vembedr)
library(skimr)
library(yarrr)
library(RColorBrewer)
library(GGally) 
library(tidyverse)
library(plotly)
library(readxl)
library(rvest)
library(biscale)
library(tidycensus)
library(cowplot)
library(units)

```

# Reading in and loading data

## In-built datasets

There are many datasets built into R, and even more that come with packages. To load them you simply use the `data` command. Typing data() will bring up a load of the possible datasets.

For example, this loads the iris dataset:

```{r}
data("iris")

# From the dplyr package
glimpse(iris)
```

If you want to specify data from a specific package, we can also tell R that:

```{r}
data("pirates", package = "yarrr")
mean(pirates$parrots)
```

All the datasets in R have a help file by using the help menu or putting a ? in front of its name. DO THIS IN THE CONSOLE NOT A CODE CHUNK.

```{r,eval=FALSE}
?pirates
```

<br>

## Loading data from Excel files

R can easily read in Microsoft Excel spreadsheets using the `readxl` package:

1.  **Make sure the readxl package is loaded.**<br>E.g. is `library(readxl)` in your library code chunk?<br>Have you run the code chunk?

2.  **Place your excel file in your project folder**.<br>E.g. here I placed *Data_frostday.xlsx* into my project folder. MAKE SURE YOU **OPEN** R-STUDIO USING YOUR LAB PROJECT!! If you are not sure what I mean see [Projects: How do I know if I am running one?](https://psu-spatial.github.io/stat462-2022/T1_R_Basics.html#212_How_do_I_know_it_has_worked) and [returning to your project](https://psu-spatial.github.io/stat462-2022/T1_R_Basics.html#213_Returning_to_your_lab_project)

3.  **Make a new code chunk and add the read_excel() command e.g.**<br>

    ```{r,eval=FALSE}
    frost <- read_excel("Data_frostday.xlsx")
    ```

    Here the command is `read_excel()`, you are applying this to "frostdays.xlsx" (e.g. reading in an excel file with that name), then assigning the result to a variable called frost. Because you are using your project, R knows to look inside your project folder to find the file.

If this works, there should be no errors and nothing prints on the screen when you run the code chunk.

When I ran it, in the environment tab, frost appeared with a description as a table with 76 rows (observations/obs), and 7 columns (variables). In R, this type of table/spreadsheet is called a `data.frame`.

```{r}
# Read in the frost.xlsx file in my project folder and assign it to a variable called frost
library(readxl)
frost    <- read_excel("Data_frostdata.xlsx")
names(frost)
```

Or you can put the full file path in the read_excel command

```{r}
# Read in the frost.xlsx file in my project folder and assign it to a variable called frost
library(readxl)
frost    <- read_excel("Data_frostdata.xlsx")
names(frost)
```

<br>

### Troubleshooting

**It says it can't find the file:** - **Are you running the right project? e.g. does it say Lab 3 at the top of the screen?** - Did you put the file into your Lab folder? - Did you spell it right and include the full .xslx extension? - Did you use quote marks?

**It says read_excel doesn't exist** - Did you install the readxl package? - Did you load the readxl package? Go click the code chunk with the library command again! - Did you spell the command right? (case sensitive) - Did you use () afterwards so R understands that it's a command?

<br>

**Using the wizard:** Sometimes you just can't get it working. In those cases, try the import wizard:<br>

-   Go to the file menu at the very top of the screen. Click import dataset, then From Excel. Use the wizard to find your file and get it looking correct. It will show you the code you need in the code preview.
-   Because we want to include this file in the markdown, rather than pressing OK, copy the code preview text and put it in your code chunk. DO NOT PUT THE VIEW LINE IN THERE, or every time you run it will open a new tab with the data.

<br>

## Reading in csv Files {#Tut6b_csv}

```{r, include=FALSE}
ozone   <- read.csv("Data_Ozone.csv")
```

.csv files are comma separated text files, you can read them into microsoft excel. In R, you don't need any special package to read in a csv file

1.  Place the csv file into your project folder

2.  Use the `read_csv()` command to read it into R. Assign it to a variable or it will just print onto the screen

3.  Run the code chunk, then click on the variable name in the Environment quadrant to check that it read in correctly (especially make sure that column names have read in correctly)

For example, for to read in a csv file on ozone and summarise:

```{r}
# Read in the some data on ozone
ozone    <- read.csv("Data_Ozone.csv")

# Check the column names, or click on its name in the Environment quadrant
summary(ozone)

```

<br>

### Troubleshooting

**It says it can't find the file:** - Are you running the right project? e.g. does it say Lab 2 at the top of the screen? - Did you put the file into your Lab 2 folder? - Did you spell it right and include the full .csv extension? - Did you use quote marks?

<br>

**Using the wizard:** Sometimes you just can't get it working. In those cases, try the import wizard:<br>

-   Go to the file menu at the very top of the screen. Click import dataset, then From Excel. Use the wizard to find your file and get it looking correct. It will show you the code you need in the code preview.
-   Because we want to include this file in the markdown, rather than pressing OK, copy the code preview text and put it in your code chunk. DO NOT PUT THE VIEW LINE IN THERE, or every time you run it will open a new tab with the data.

## Reading in txt Files {#Tut6c_csv}

Same as above but you use the read.txt command. You get a lot of options here, from telling R if it has headers/column names to changing the 'delimiter'. See the help file and http://www.sthda.com/english/wiki/reading-data-from-txt-csv-files-r-base-functions for more.

# 
